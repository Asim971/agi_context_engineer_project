{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Google Apps Script Project",
        "description": "Set up the main Google Apps Script project structure and basic configuration for the unified Anwar Sales Management System.",
        "details": "Create the main project structure with proper file organization. Set up manifest file (appsscript.json) with necessary scopes. Initialize Git repository for version control. Create basic project documentation.",
        "testStrategy": "Verify project structure is created correctly and can be deployed to Google Apps Script.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Project Structure",
            "description": "Set up the main project directory with organized file structure.",
            "dependencies": [],
            "details": "Create main project folder with subdirectories for handlers, utilities, services, and configuration files.",
            "status": "pending",
            "testStrategy": "Verify directory structure exists and follows conventions."
          },
          {
            "id": 2,
            "title": "Configure Apps Script Manifest",
            "description": "Set up appsscript.json with required OAuth scopes and settings.",
            "dependencies": [],
            "details": "Configure OAuth scopes for Google Sheets, Gmail, Calendar, and other required services.",
            "status": "pending",
            "testStrategy": "Deploy to Apps Script and verify scopes are requested correctly."
          },
          {
            "id": 3,
            "title": "Initialize Version Control",
            "description": "Set up Git repository with proper .gitignore and initial commit.",
            "dependencies": [],
            "details": "Create .gitignore for Apps Script files, initialize repository, and make initial commit.",
            "status": "pending",
            "testStrategy": "Verify git repository is initialized and files are tracked correctly."
          }
        ]
      },
      {
        "id": 2,
        "title": "Design Google Sheets Database Schema",
        "description": "Create a comprehensive database schema in Google Sheets for all registration types and CRM data.",
        "details": "Design normalized database structure with separate sheets for contractors, engineers, retailers, potential sites, and CRM data. Define column structures, data types, and validation rules.",
        "testStrategy": "Create test data and verify schema supports all required queries and operations.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Contractor Registration Schema",
            "description": "Create sheet structure for contractor registration data.",
            "dependencies": [],
            "details": "Define columns for personal info, contact details, services, availability, and status tracking.",
            "status": "pending",
            "testStrategy": "Validate schema with sample contractor data."
          },
          {
            "id": 2,
            "title": "Design Engineer Registration Schema",
            "description": "Create sheet structure for engineer registration data.",
            "dependencies": [],
            "details": "Define columns for engineer qualifications, specializations, contact info, and approval status.",
            "status": "pending",
            "testStrategy": "Validate schema with sample engineer data."
          },
          {
            "id": 3,
            "title": "Design Retailer Registration Schema",
            "description": "Create sheet structure for retailer registration data.",
            "dependencies": [],
            "details": "Define columns for business info, location, contact details, and verification status.",
            "status": "pending",
            "testStrategy": "Validate schema with sample retailer data."
          },
          {
            "id": 4,
            "title": "Design Potential Site Schema",
            "description": "Create sheet structure for potential site registration data.",
            "dependencies": [],
            "details": "Define columns for site details, location, contact person, and evaluation status.",
            "status": "pending",
            "testStrategy": "Validate schema with sample site data."
          },
          {
            "id": 5,
            "title": "Design CRM Approval Schema",
            "description": "Create sheet structure for CRM approval workflows.",
            "dependencies": [],
            "details": "Define columns for approval stages, timestamps, approver info, and status tracking.",
            "status": "pending",
            "testStrategy": "Validate schema supports all approval workflows."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Contractor Registration Workflow",
        "description": "Build the contractor registration workflow with form handling and CRM integration.",
        "details": "Create Google Form for contractor registration, implement Apps Script handler for form submissions, and integrate with CRM approval workflow.",
        "testStrategy": "Test complete registration flow from form submission to CRM approval.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Contractor Registration Form",
            "description": "Build Google Form for contractor registration with all required fields.",
            "dependencies": [],
            "details": "Design form with fields for personal info, services, experience, and contact details.",
            "status": "pending",
            "testStrategy": "Test form submission and data validation."
          },
          {
            "id": 2,
            "title": "Implement Form Handler",
            "description": "Create Apps Script function to handle contractor form submissions.",
            "dependencies": [],
            "details": "Implement data validation, sheet updates, and trigger CRM workflow.",
            "status": "pending",
            "testStrategy": "Test handler with various form submissions."
          },
          {
            "id": 3,
            "title": "Integrate WhatsApp Notifications",
            "description": "Send WhatsApp confirmation to contractors upon registration.",
            "dependencies": [],
            "details": "Implement WhatsApp messaging using MyTAPI for registration confirmations.",
            "status": "pending",
            "testStrategy": "Test message delivery and content accuracy."
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement Engineer Registration Workflow",
        "description": "Build the engineer registration workflow with form handling and CRM integration.",
        "details": "Create Google Form for engineer registration, implement Apps Script handler, and integrate with CRM approval workflow.",
        "testStrategy": "Test complete engineer registration flow.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Engineer Registration Form",
            "description": "Build Google Form for engineer registration.",
            "dependencies": [],
            "details": "Design form with fields for qualifications, specializations, and contact info.",
            "status": "pending",
            "testStrategy": "Test form functionality and validation."
          },
          {
            "id": 2,
            "title": "Implement Engineer Handler",
            "description": "Create Apps Script handler for engineer registrations.",
            "dependencies": [],
            "details": "Handle form submissions, validate data, and update engineer sheets.",
            "status": "pending",
            "testStrategy": "Test handler with sample engineer registrations."
          },
          {
            "id": 3,
            "title": "Send Engineer Notifications",
            "description": "Implement WhatsApp notifications for engineer registrations.",
            "dependencies": [],
            "details": "Send confirmation messages to engineers upon registration.",
            "status": "pending",
            "testStrategy": "Test notification delivery and content."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Retailer Registration Workflow",
        "description": "Build the retailer registration workflow with form handling and CRM integration.",
        "details": "Create Google Form for retailer registration, implement Apps Script handler, and integrate with CRM approval workflow.",
        "testStrategy": "Test complete retailer registration flow.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Retailer Registration Form",
            "description": "Build Google Form for retailer registration.",
            "dependencies": [],
            "details": "Design form with business info, location, and contact details.",
            "status": "pending",
            "testStrategy": "Test form submission and validation."
          },
          {
            "id": 2,
            "title": "Implement Retailer Handler",
            "description": "Create Apps Script handler for retailer registrations.",
            "dependencies": [],
            "details": "Process retailer form submissions and update retailer sheets.",
            "status": "pending",
            "testStrategy": "Test handler with sample retailer data."
          },
          {
            "id": 3,
            "title": "Send Retailer Notifications",
            "description": "Implement WhatsApp notifications for retailer registrations.",
            "dependencies": [],
            "details": "Send confirmation messages to retailers upon registration.",
            "status": "pending",
            "testStrategy": "Test notification delivery and accuracy."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Potential Site Registration Workflow",
        "description": "Build the potential site registration workflow with form handling and CRM integration.",
        "details": "Create Google Form for potential site registration, implement Apps Script handler, and integrate with CRM approval workflow.",
        "testStrategy": "Test complete potential site registration flow.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Potential Site Form",
            "description": "Build Google Form for potential site registration.",
            "dependencies": [],
            "details": "Design form with site details, location, and contact information.",
            "status": "pending",
            "testStrategy": "Test form functionality and data capture."
          },
          {
            "id": 2,
            "title": "Implement Site Handler",
            "description": "Create Apps Script handler for potential site registrations.",
            "dependencies": [],
            "details": "Process site form submissions and update site sheets.",
            "status": "pending",
            "testStrategy": "Test handler with sample site data."
          },
          {
            "id": 3,
            "title": "Send Site Notifications",
            "description": "Implement WhatsApp notifications for potential site registrations.",
            "dependencies": [],
            "details": "Send confirmation messages for site registrations.",
            "status": "pending",
            "testStrategy": "Test notification delivery and content."
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Site Updates and Status Management",
        "description": "Build functionality for updating site statuses and managing site-related workflows.",
        "details": "Create forms and handlers for site status updates, implement approval workflows, and integrate with existing site management.",
        "testStrategy": "Test site update workflows and status changes.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Site Update Form",
            "description": "Build form for updating existing site information and status.",
            "dependencies": [],
            "details": "Design form for site updates with status changes and additional info.",
            "status": "pending",
            "testStrategy": "Test form submission and data updates."
          },
          {
            "id": 2,
            "title": "Implement Update Handler",
            "description": "Create handler for processing site updates.",
            "dependencies": [],
            "details": "Process site update forms and update relevant sheets.",
            "status": "pending",
            "testStrategy": "Test update processing and data integrity."
          },
          {
            "id": 3,
            "title": "Status Change Notifications",
            "description": "Send WhatsApp notifications for site status changes.",
            "dependencies": [],
            "details": "Notify relevant parties when site status changes.",
            "status": "pending",
            "testStrategy": "Test notification delivery for status updates."
          }
        ]
      },
      {
        "id": 8,
        "title": "Integrate Google Workspace and WhatsApp Business API",
        "description": "Integrate with Google Workspace for notifications and document management, and with WhatsApp Business API (via MyTAPI) for messaging.",
        "details": "Use Apps Script's Gmail and Calendar APIs for notifications and scheduling. Integrate MyTAPI for WhatsApp messaging (send registration confirmations, workflow updates). Ensure secure API key management.",
        "testStrategy": "Send test notifications and WhatsApp messages for various workflow events. Validate delivery and content.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Google Cloud Project and Enable APIs",
            "description": "Create a Google Cloud project and enable the necessary Google Workspace APIs (Gmail, Calendar, Drive) to support notifications and document management.",
            "dependencies": [],
            "details": "Navigate to the Google Cloud Console, create a new project, and enable the Gmail, Calendar, and Drive APIs. Configure OAuth consent screen and set up OAuth 2.0 credentials or service accounts as required. Document API scopes needed for each integration.",
            "status": "pending",
            "testStrategy": "Verify API access by making test calls to each enabled API using the credentials. Confirm successful authentication and permissions."
          },
          {
            "id": 2,
            "title": "Implement Google Workspace Notifications and Document Management",
            "description": "Develop integration logic for sending notifications (via Gmail and Calendar) and managing documents (via Drive) using Apps Script or REST APIs.",
            "dependencies": [],
            "details": "Use Google Apps Script or REST client libraries to implement functions for sending email notifications, creating calendar events, and managing Drive files. Ensure code adheres to best practices for error handling and logging.",
            "status": "pending",
            "testStrategy": "Send test notifications and create calendar events/documents. Confirm receipt and correct creation in Google Workspace."
          },
          {
            "id": 3,
            "title": "Integrate WhatsApp Business API via MyTAPI",
            "description": "Set up integration with the WhatsApp Business API using the MyTAPI service to enable messaging capabilities for registration confirmations and workflow updates.",
            "dependencies": [],
            "details": "Register for MyTAPI, obtain API credentials, and review documentation for sending messages. Implement API calls to send WhatsApp messages triggered by relevant workflow events.",
            "status": "pending",
            "testStrategy": "Send test messages to WhatsApp numbers and verify delivery and content accuracy."
          },
          {
            "id": 4,
            "title": "Implement Secure API Key and Credential Management",
            "description": "Establish secure storage and access patterns for all API keys and credentials used in the integration.",
            "dependencies": [],
            "details": "Store API keys and secrets in a secure vault or environment variables. Restrict access using IAM roles and follow the principle of least privilege. Rotate credentials regularly and audit access logs.",
            "status": "pending",
            "testStrategy": "Attempt unauthorized access to credentials to confirm security. Review audit logs for anomalies."
          },
          {
            "id": 5,
            "title": "Orchestrate Workflow and Error Handling Across Integrations",
            "description": "Develop orchestration logic to coordinate Google Workspace and WhatsApp messaging workflows, including robust error handling and retry mechanisms.",
            "dependencies": [],
            "details": "Implement a controller module or service that triggers notifications and messaging in response to business events. Ensure errors in one integration do not block others, and implement retries or fallback logic as needed. Log all integration events and errors for monitoring.",
            "status": "pending",
            "testStrategy": "Simulate workflow events and failure scenarios. Verify correct orchestration, error handling, and logging."
          }
        ]
      },
      {
        "id": 9,
        "title": "Develop Monitoring, Analytics, and Reporting Tools",
        "description": "Implement dashboards and export/reporting features for system monitoring and analytics.",
        "details": "Create Apps Script dashboards (using Google Sheets/Charts) for registration stats, workflow progress, and system health. Implement data export to CSV/PDF and scheduled email reports.",
        "testStrategy": "Generate reports and dashboards with sample data. Validate accuracy and export functionality.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Data Models for Monitoring and Analytics",
            "description": "Define and implement the data structures in Google Sheets to capture registration stats, workflow progress, and system health metrics.",
            "dependencies": [],
            "details": "Identify all key metrics and events to be tracked. Create dedicated sheets/tabs for each data category (e.g., registrations, workflow steps, health checks). Ensure data is structured for efficient querying and visualization. Use Apps Script to automate data collection and updates.",
            "status": "pending",
            "testStrategy": "Verify that all required metrics are captured and updated correctly in the sheets. Manually input test data and confirm structure supports intended analytics."
          },
          {
            "id": 2,
            "title": "Develop Interactive Dashboards Using Google Sheets and Charts",
            "description": "Build dynamic dashboards in Google Sheets using built-in charting tools and Apps Script to visualize registration stats, workflow progress, and system health.",
            "dependencies": [],
            "details": "Leverage Google Sheets' chart features to create visualizations (bar, line, pie charts) for each metric. Use Apps Script to automate chart updates and enable filtering or drill-downs. Organize dashboards for clarity and ease of use.",
            "status": "pending",
            "testStrategy": "Check that dashboards update in real time as data changes. Validate chart accuracy and interactivity with sample data."
          },
          {
            "id": 3,
            "title": "Implement Data Export Functionality (CSV/PDF)",
            "description": "Enable users to export dashboard data and charts to CSV and PDF formats via Apps Script custom menu options.",
            "dependencies": [],
            "details": "Use Apps Script to add custom menu items for exporting data. Implement functions to convert relevant sheet data to CSV and generate PDFs of dashboards/charts. Ensure exported files are formatted and named appropriately.",
            "status": "pending",
            "testStrategy": "Test export features with various data sets. Open exported files to confirm data integrity and formatting."
          },
          {
            "id": 4,
            "title": "Set Up Scheduled Email Reports",
            "description": "Automate the generation and delivery of summary reports via email on a scheduled basis using Apps Script triggers.",
            "dependencies": [],
            "details": "Use Apps Script time-driven triggers to schedule report generation. Compile summary data and charts into email content or attach exported files (CSV/PDF). Configure recipient lists and email templates for clarity.",
            "status": "pending",
            "testStrategy": "Simulate scheduled runs and verify emails are sent with correct content and attachments. Confirm delivery to intended recipients."
          },
          {
            "id": 5,
            "title": "Implement Monitoring and Logging for Tool Health",
            "description": "Add monitoring and logging to track the health and usage of dashboards, exports, and reporting features, surfacing errors and usage stats.",
            "dependencies": [],
            "details": "Integrate Apps Script logging (Logger.log) and review logs in the Executions dashboard. Track script errors, export/report usage, and trigger failures. Optionally, create a health status sheet or notification system for critical issues.",
            "status": "pending",
            "testStrategy": "Intentionally trigger errors and monitor logs for accurate capture. Review health status outputs and notifications for correctness."
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Responsive UI and Offline Synchronization",
        "description": "Ensure the web app is mobile-friendly and supports offline data entry with later synchronization.",
        "details": "Use HTML/CSS for responsive design in Apps Script web apps. Implement offline data capture using browser local storage or Google Forms with Apps Script triggers for sync. Handle sync conflicts and data integrity.",
        "testStrategy": "Test UI on multiple devices and browsers. Simulate offline entry and verify data syncs correctly when online.",
        "priority": "medium",
        "dependencies": [
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Responsive UI Layout",
            "description": "Create a mobile-friendly user interface using HTML and CSS that adapts to different screen sizes for the Apps Script web app.",
            "dependencies": [],
            "details": "Structure the UI using semantic HTML elements and apply responsive CSS techniques such as media queries and flexible layouts. Separate CSS into its own file and include it using a custom Apps Script include() function for maintainability. Test the layout on various devices and screen sizes to ensure usability.",
            "status": "pending",
            "testStrategy": "Manually test the UI on multiple devices and browsers. Use browser developer tools to simulate different screen sizes and verify that all elements remain accessible and visually consistent."
          },
          {
            "id": 2,
            "title": "Implement Client-Side Offline Data Capture",
            "description": "Enable offline data entry by storing user input locally in the browser when the app is offline.",
            "dependencies": [
              1
            ],
            "details": "Use the browser's localStorage or IndexedDB API to save form data when the user is offline. Add JavaScript event listeners to detect network status changes and trigger local storage of data. Ensure that the UI provides feedback to users when data is saved offline.",
            "status": "pending",
            "testStrategy": "Simulate offline mode in the browser, enter data, and verify that it is stored locally and persists after page reloads or browser restarts."
          },
          {
            "id": 3,
            "title": "Develop Synchronization Logic with Apps Script Backend",
            "description": "Create logic to synchronize locally stored data with the server when the app regains connectivity.",
            "dependencies": [
              2
            ],
            "details": "Implement a sync function in JavaScript that detects when the app is back online and sends unsynced data to the Apps Script backend using google.script.run. On the server side, process and store the received data (e.g., in Google Sheets or another database). Provide user feedback on sync status and errors.",
            "status": "pending",
            "testStrategy": "Test by entering data offline, reconnecting, and verifying that data is correctly uploaded to the backend and removed from local storage."
          },
          {
            "id": 4,
            "title": "Handle Synchronization Conflicts and Data Integrity",
            "description": "Implement mechanisms to detect and resolve conflicts that may occur during synchronization, ensuring data integrity.",
            "dependencies": [
              3
            ],
            "details": "Design a conflict resolution strategy (e.g., last-write-wins, user prompt, or merge). On the backend, check for conflicting changes before applying updates. On the client, notify users of conflicts and allow them to resolve if necessary. Ensure all sync operations are atomic and consistent.",
            "status": "pending",
            "testStrategy": "Create scenarios with conflicting changes (e.g., same record edited offline and online) and verify that conflicts are detected and resolved according to the chosen strategy."
          },
          {
            "id": 5,
            "title": "Integrate and Test End-to-End Workflow",
            "description": "Combine all components and perform comprehensive testing to ensure the responsive UI and offline synchronization work seamlessly together.",
            "dependencies": [
              4
            ],
            "details": "Integrate the responsive UI, offline data capture, synchronization logic, and conflict handling into a single workflow. Conduct end-to-end tests covering typical user journeys, including offline data entry, reconnection, and conflict scenarios. Collect user feedback and refine the implementation as needed.",
            "status": "pending",
            "testStrategy": "Perform manual and automated tests simulating real-world usage, including device rotation, network loss and recovery, and concurrent edits. Validate that all features function as intended and data remains consistent."
          }
        ]
      },
      {
        "id": 11,
        "title": "Consolidate 8 Separate Apps Script Projects into Unified Structure",
        "description": "Unify the 8 separate apps-script directories (contractor, engineer, retailer, potential-site, and their CRM variants) into a single modular Google Apps Script project with shared utilities and consistent architecture.",
        "details": "Analyze all 8 Code.gs files to identify common patterns, shared utilities, and duplicate code. Create a unified project structure with: 1) Shared configuration and constants, 2) Common database utilities for Google Sheets operations, 3) Unified WhatsApp messaging service, 4) Modular registration handlers for each entity type, 5) Shared CRM approval workflows, 6) Centralized error handling and logging. Ensure all hardcoded API keys are moved to secure configuration.",
        "testStrategy": "Test each registration flow (contractor, engineer, retailer, potential-site) in the unified structure. Verify WhatsApp messaging works for all scenarios. Ensure CRM approval workflows function correctly across all entity types.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Analyze and Document Current Structure",
            "description": "Document the current 8 separate apps-script projects, their functions, and common patterns.",
            "dependencies": [],
            "details": "Create a comprehensive analysis document listing all functions, shared utilities, and unique features in each of the 8 Code.gs files. Identify duplication and opportunities for consolidation.",
            "status": "pending",
            "testStrategy": "Review document completeness and accuracy with team members familiar with the current system."
          },
          {
            "id": 2,
            "title": "Design Unified Project Architecture",
            "description": "Design the new unified project structure with modular components and shared utilities.",
            "dependencies": [
              1
            ],
            "details": "Create architecture diagram showing: shared config module, database utilities, WhatsApp service, registration handlers, CRM workflows, and error handling. Define file structure and naming conventions.",
            "status": "pending",
            "testStrategy": "Review architecture with senior developers for scalability and maintainability."
          },
          {
            "id": 3,
            "title": "Create Shared Configuration Module",
            "description": "Implement centralized configuration for API keys, sheet IDs, and constants.",
            "dependencies": [
              2
            ],
            "details": "Create Config.gs with secure storage for Maytapi API keys, Google Sheet IDs, and other constants. Implement environment-based configuration switching.",
            "status": "pending",
            "testStrategy": "Test configuration loading in different environments and verify API keys are properly secured."
          },
          {
            "id": 4,
            "title": "Build Unified Database Utilities",
            "description": "Create shared Google Sheets utilities for all database operations.",
            "dependencies": [
              3
            ],
            "details": "Implement Database.gs with functions for: sheet creation, data insertion, data updates, lookups, and validation. Ensure compatibility with all existing sheet structures.",
            "status": "pending",
            "testStrategy": "Test all database operations with sample data across different sheet types."
          },
          {
            "id": 5,
            "title": "Create Unified WhatsApp Service",
            "description": "Build a centralized WhatsApp messaging service using the shared Maytapi integration.",
            "dependencies": [
              3,
              4
            ],
            "details": "Implement WhatsAppService.gs with functions for: sending registration confirmations, CRM notifications, and status updates. Include error handling and retry logic.",
            "status": "pending",
            "testStrategy": "Test all message types with test phone numbers and verify delivery."
          },
          {
            "id": 6,
            "title": "Implement Modular Registration Handlers",
            "description": "Create modular handlers for each registration type (contractor, engineer, retailer, potential-site).",
            "dependencies": [
              4,
              5
            ],
            "details": "Create separate handler files for each entity type: ContractorHandler.gs, EngineerHandler.gs, RetailerHandler.gs, PotentialSiteHandler.gs. Each should use shared utilities.",
            "status": "pending",
            "testStrategy": "Test each handler independently with sample form submissions."
          },
          {
            "id": 7,
            "title": "Create Unified CRM Approval Workflows",
            "description": "Implement shared CRM approval logic for all entity types.",
            "dependencies": [
              4,
              5,
              6
            ],
            "details": "Create CRMApproval.gs with functions for: approval status updates, notification triggers, and approval history tracking. Ensure compatibility with all entity types.",
            "status": "pending",
            "testStrategy": "Test approval workflows for each entity type and verify notifications are sent correctly."
          },
          {
            "id": 8,
            "title": "Implement Centralized Error Handling and Logging",
            "description": "Create comprehensive error handling and logging system.",
            "dependencies": [
              3,
              4,
              5,
              6,
              7
            ],
            "details": "Implement Logger.gs with functions for: error logging, debug logging, and execution tracking. Include email notifications for critical errors.",
            "status": "pending",
            "testStrategy": "Test error handling by triggering various error conditions and verifying logs are created correctly."
          },
          {
            "id": 9,
            "title": "Create Main Entry Point and Triggers",
            "description": "Implement the main Code.gs file with unified triggers and entry points.",
            "dependencies": [
              6,
              7,
              8
            ],
            "details": "Create unified Code.gs that delegates to appropriate handlers based on trigger type and form source. Set up all necessary triggers.",
            "status": "pending",
            "testStrategy": "Test all trigger scenarios (form submissions, edits, scheduled tasks) to ensure correct delegation."
          },
          {
            "id": 10,
            "title": "Migrate Existing Data and Test Full System",
            "description": "Migrate existing data from old sheets and perform comprehensive testing.",
            "dependencies": [
              9
            ],
            "details": "Create migration scripts to transfer data from old sheets to new unified structure. Perform end-to-end testing of all workflows.",
            "status": "pending",
            "testStrategy": "Test all registration flows, CRM workflows, and data integrity after migration. Create rollback plan."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-25T09:54:33.928Z",
      "updated": "2025-07-26T03:57:40.262Z",
      "description": "Tasks for master context"
    }
  }
}